@startuml server-architecture

!define ABSTRACT abstract class

skinparam {
    ClassAttributeIconSize 0
    ClassBackgroundColor<<Config>> LightGreen
    ClassBackgroundColor<<Core>> LightBlue
    ClassBackgroundColor<<Utility>> LightGray
    ClassBackgroundColor<<Structure>> LightYellow
    PackageBackgroundColor White
    PackageBorderColor Gray
    ClassFontSize 12
    NoteFontSize 11
    PackageFontSize 13
}

title PGS Architecture Class Diagram

package "Configuration" {
    class Config <<Config>> {
        + port: int
        + staticFolder: string
        + threadCount: int
        + rateLimit: RateLimitConfig
        + cache: CacheConfig
    }
    note right of Config: Plain configuration structure\nInitialized from pgs_conf.json

    class RateLimitConfig <<Config>> {
        + maxRequests: int
        + timeWindow: int
    }

    class CacheConfig <<Config>> {
        + sizeMB: size_t
        + maxAgeSeconds: int
    }
}

package "Data Structures" {
    class ConnectionInfo <<Structure>> {
        + startTime: chrono::steady_clock::time_point
        + ip: string
        + isLogged: bool
        + isClosureLogged: bool
        + bytesReceived: uint64_t
        + bytesSent: uint64_t
        + logBuffer: vector<string>
        + ConnectionInfo(time: chrono::steady_clock::time_point, ipAddr: string,\n logged: bool = false, closureLogged: bool = false,\n received: uint64_t = 0, sent: uint64_t = 0)
    }
    note bottom of ConnectionInfo: Tracks individual client connection metrics\nand maintains connection-specific log buffers

    class SocketSettings <<Structure>> {
    + {static} const keepAlive: int = 1
    + {static} const keepIdle: int = 60
    + {static} const keepInterval: int = 10
    + {static} const keepCount: int = 3
}

   class CacheEntry <<Structure>> {
    + data: vector<char>
    + mimeType: string
    + lastModified: time_t
    + lruIterator: list<string>::iterator
    + CacheEntry(const vector<char>&, const string&, time_t, list<string>::iterator)
    + template<typename Vector> CacheEntry(const Vector&, const string&,\n time_t, list<string>::iterator)
}

    class LogMessage <<Structure>> {
    + message: string
    + level: string
    + ip: string
    + timestamp: chrono::system_clock::time_point
    + LogMessage(const string&, const string&, const string&)
}


}

package "Core Components" {
    class Server <<Core>> {
        - socket: Socket
        - ~Socket
        - router: Router
        - pool: ThreadPool
        - connectionsMutex: mutex
        - connections: map<int, ConnectionInfo>
        - shouldStop: atomic<bool>
        - epoll: EpollWrapper
        - rateLimiter: RateLimiter
        - cache: Cache
        - cacheCleanupThread: thread 
        + Server(int port, const string& staticFolder, int threadCount,\n int maxRequests, int timeWindow, int cacheSizeMB, int maxAgeSeconds)
        + start: void
        + stop: void
        - handleClient(int client_socket, const string& clientIp): void
        - closeConnection(int client_socket): void
        - logRequest(int client_socket, const string& message): void
    }
    note top of Server: Central server component that orchestrates\nall other components and manages the\nlifecycle of client connections

    class Socket <<Core>> {
        - server_fd: int
        - port: int
        + Socket(int port)
        + bind: void
        + listen: void
        + closeSocket: void
        + acceptConnection(string& clientIp): int
        + getSocketFd const: int
        + {static} durationToString(const chrono::steady_clock::duration& duration): string
    }
    note bottom of Socket: RAII wrapper for TCP socket operations\nwith dual-stack (IPv4/IPv6) support\nand connection management

    class Router <<Core>> {
    - staticFolder: string
    - {static} const TEXT_HTML: string
    - {static} const TEXT_PLAIN: string
    - {static} const IMAGE_JPEG: string
    - {static} const htmlExts: set<string_view>
    - {static} const jpegExts: set<string_view>
    - {static} const validExts: set<string_view>
    - {static} const mimeTypes: unordered_map<string_view, string_view>
    - {static} const SIMPLE_404_RESPONSE: char*
    - {static} const RESPONSE_404_HEADER: string
    - {static} const CRLF: char*
    - {static} cached404Content: string
    - {static} flag404: once_flag
    - {static} has404File: bool

    + Router(const string& staticFolder)
    + route(const string& path, int client_socket,\n const string& clientIp, Middleware* middleware,\n Cache* cache): void
    + getStaticFolder const: string
    - getMimeType(const string& path): string
}
    note right of Router: Handles routing of HTTP requests\nto appropriate static files\nwith MIME type detection\nand 404 handling

class ThreadPool <<Core>> {
    - {static} CACHE_LINE_SIZE: size_t
    - {static} QUEUE_SIZE: size_t
    - {static} MAX_STEAL_ATTEMPTS: size_t
    - {static} SPIN_COUNT_MAX: size_t
    
    - LockFreeQueue<T>: class
    - ThreadData: struct
    - thread_data: vector<unique_ptr<ThreadData>>
    - workers: vector<thread>
    - global_queue: LockFreeQueue<function<void()>>
    - taskMutex: mutable shared_mutex
    - condition: condition_variable_any
    - stop_flag: atomic<bool>
    - active_threads: atomic<size_t>
    - rd: thread_local static random_device
    - gen: thread_local static mt19937
    - dist: thread_local static uniform_int_distribution<size_t>
    
    + ThreadPool(size_t numThreads)
    + ~ThreadPool
    + ThreadPool(const ThreadPool&) = delete
    + ThreadPool& operator=(const ThreadPool&) = delete
    + template<typename F, typename... Args>\n enqueue(F&& f, Args&&... args): future<invoke_result_t<F, Args...>>
    + stop: void
    + get_active_threads const: size_t
    + get_thread_tasks_processed(size_t) const: size_t
    
    - steal_task(function<void()>&, size_t): bool
    - worker_thread(size_t): void
    - setThreadAffinity(pthread_t, size_t): bool
}
    note top of ThreadPool: High-performance thread pool with:\n- Lock-free queue implementation\n- Work stealing algorithm\n- Adaptive spinning\n- CPU affinity optimization\n- Thread-local task distribution\n- Performance monitoring

   class Http <<Core>> {
    - {static} const BUFFER_SIZE: size_t = 65536
    - {static} const ALIGNMENT: size_t = 512
    - {static} const SENDFILE_CHUNK: size_t = 1048576
    - {static} const MAX_IOV: int = IOV_MAX

    + {static} getRequestPath(const string& request): string
    + {static} sendResponse(int client_socket, const string& content,\n const string& mimeType, int statusCode,\n const string& clientIp, bool isIndex = false,\n Middleware* middleware = nullptr, Cache* cache = nullptr): void
    + {static} isAssetRequest(const string& path): bool

    - {static} setupSocketOptions(int client_socket, int cork,\n const string& clientIp): bool
    - {static} handleFileContent(FileGuard& fileGuard,\n const string& filePath, pmr::vector<char>& fileContent,\n size_t& fileSize, time_t& lastModified,\n const string& clientIp): bool
    - {static} compressContent(Middleware* middleware,\n const string& mimeType, size_t fileSize,\n pmr::vector<char>& fileContent,\n pmr::string& compressedContent, bool cacheHit,\n FileGuard& fileGuard,\n pmr::monotonic_buffer_resource& pool): bool
    - {static} generateHeaders(int statusCode,\n const string& mimeType, size_t fileSize,\n time_t lastModified, bool isCompressed): string
    - {static} sendWithWritev(int client_socket,\n const string& headerStr,\n const pmr::string& compressedContent,\n const pmr::vector<char>& fileContent,\n bool isCompressed, bool cacheHit,\n const string& clientIp): size_t
    - {static} sendLargeFile(int client_socket,\n FileGuard& fileGuard, size_t fileSize,\n const string& clientIp): size_t
}
    note right of Http: Handles HTTP request processing\nand response generation

class Logger <<Core>> {
    - {enum} LogLevel {INFO, WARNING, ERROR, SUCCESS}
    - {static} COLORS: array<const char*, 9>
    - {static} BOLD: const char*
    - {static} CHECK_MARK: const char*
    - {static} CROSS_MARK: const char*
    - {static} INFO_MARK: const char*
    - {static} WARN_MARK: const char*
    - {static} LOG_LEVELS: string_view[]
    
    - pool: pmr::monotonic_buffer_resource
    - messageQueue: pmr::deque<LogMessage>
    - mutex: shared_mutex
    - logFile: ofstream
    - queueCV: condition_variable_any
    - loggerThread: jthread
    - running: atomic<bool>
    - lastEventWaitLog: optional<chrono::steady_clock::time_point>
    - isWaitingForEvents: bool
    - EVENT_WAIT_LOG_INTERVAL: chrono::seconds
    - {static} instance: unique_ptr<Logger>
    - {static} initFlag: once_flag

    - Logger
    - processLogs(stop_token st): void
    - writeLogMessage(const LogMessage& msg): void
    - formatLogMessage(const LogMessage& msg): string
    - {static} formatSuccess(const string& msg): string
    - {static} formatError(const string& msg): string
    - {static} formatInfo(const string& msg): string
    - {static} formatWarning(const string& msg): string
    - {static} formatStep(int num, const string& msg): string

    + {static} getInstance: Logger*
    + {static} destroyInstance: void
    + log(string_view message, LogLevel level = LogLevel::INFO, string_view ip = "-"): void
    + error(string_view message, string_view ip = "-"): void
    + warning(string_view message, string_view ip = "-"): void
    + success(string_view message, string_view ip = "-"): void
    + info(string_view message, string_view ip = "-"): void
    + step(int num, string_view message, string_view ip = "-"): void
    + ~Logger
}

    class EpollWrapper <<Core>> {
        - epoll_fd: int
        + EpollWrapper
        + get const: int
        + wait(epoll_event* events, int maxEvents, int timeout): int
        + add(int fd, uint32_t events): bool
        + modify(int fd, uint32_t events): bool
        + remove(int fd): bool
        + template<typename Iterator>\n batch_operation(Iterator begin, Iterator end,\n int op, uint32_t events = 0): size_t
    }
    note right of EpollWrapper: RAII wrapper for Linux epoll API\nwith move semantics and\noptimized inline operations
}

package "Utility Classes" {
    abstract class Middleware <<Utility>> {
        + {abstract} process(const string& data): string
        + {abstract} ~Middleware = default
    }

     class SocketOptionGuard <<Utility>> {
    - cork: int&
    - client_socket: int
    + SocketOptionGuard(int& c, int cs)
    + ~SocketOptionGuard
}

    class FileGuard <<Utility>> {
    - fd: int
    + FileGuard
    + explicit FileGuard(int f)
    + ~FileGuard
    + get const: int
    + reset(int f = -1): void
}

    class MMapGuard <<Utility>> {
    - addr: void*
    - length: size_t
    + MMapGuard(void* a, size_t l)
    + ~MMapGuard
}



    class Cache <<Utility>> {
    - cache: unordered_map<string, CacheEntry>
    - lruList: list<string>
    - mutex: shared_mutex
    - maxSize: size_t
    - currentSize: size_t
    - maxAge: chrono::seconds
    
    + explicit Cache(size_t maxSizeMB, chrono::seconds maxAge)
    + template<typename Vector> get(const string& key, Vector& data,\n string& mimeType, time_t& lastModified): bool
    + template<typename Vector> set(const string& key, const Vector& data,\n const string& mimeType, time_t lastModified): void
    + clear: void
    + remove(const string& key): bool
    + exists(const string& key): bool
    + size const: size_t
    + count const: size_t
    + getMaxAge const: chrono::seconds
    + setMaxAge(chrono::seconds newMaxAge): void
    - updateLRU(const string& key): void
    - cleanExpiredEntries: void 
    + periodicCleanup: void
}
    note right of Cache: Thread-safe LRU cache implementation\nwith size-based eviction,\nTTL support, and memory optimization\nusing shared mutex for concurrent access

    class RateLimiter <<Utility>> {
        + RateLimiter(size_t maxRequests, std::chrono::seconds timeWindow)
        + std::string process(const std::string &data) override
        - const size_t maxTokens
        - const double refillRate
        - struct TokenBucket
        - std::unordered_map<std::string, TokenBucket> clientBuckets
        - std::mutex rateMutex
        - static constexpr const char *RATE_LIMIT_RESPONSE
    }

    class Compression <<Utility>> {
        - {static} nonCompressibleTypes: unordered_set<string>
        - {static} compressibleTypes: unordered_set<string>

        + {static} shouldCompress(const string& mimeType, size_t contentLength): bool
        + {static} clientAcceptsGzip(const string& request): bool
        + process(const string& data) override: string
        - compressData(const string& data): string
    }   

    class Parser <<Utility>> {
        + {static} parseConfig(const string& configFilePath): Config
    }
}

Server "1" *-- "1" Socket : manages >
Server "1" *-- "1" Router : uses >
Server "1" *-- "1" ThreadPool : delegates tasks to >
Server "1" *-- "1" EpollWrapper : manages events with >
Server "1" *-- "1" RateLimiter : limits requests with >
Server "1" *-- "1" Cache : caches content with >
Server "1" o-- "0..*" ConnectionInfo : tracks >

Config "1" *-- "1" RateLimitConfig : contains >
Config "1" *-- "1" CacheConfig : contains >
Parser ..> Config : creates >
Server ..> Config : configured by >

Cache "1" o-- "0..*" CacheEntry : stores >

Http +-- SocketSettings : configures >
Http +-- SocketOptionGuard : manages >
Http +-- FileGuard : manages >
Http +-- MMapGuard : manages >
Server ..> Http : processes requests with >
Router ..> Http : uses >

Middleware <|-- RateLimiter : implements
Middleware <|-- Compression : implements
Router ..> Middleware : uses >

Logger "1" *-- "0..*" LogMessage : contains >
Server ..> Logger : logs through >
Router ..> Logger : logs through >

Router ..> Cache : uses >
Router ..> Middleware : uses >

Config -[hidden]down-> ConnectionInfo
Socket -[hidden]right-> Router



Http -[hidden]right-> Parser

legend right
  |= Color |= Component Type |= Purpose |
  |<#LightGreen>| Configuration |Configuration structures|
  |<#LightBlue>| Core Components |Server functionality|
  |<#LightGray>| Utility Classes |Helper functions & formatting|
  |<#LightYellow>| Data Structures |Data management|
endlegend

@endumlnd

@enduml