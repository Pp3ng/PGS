@startuml server-architecture

!define ABSTRACT abstract class

skinparam {
    ClassAttributeIconSize 0
    ClassBackgroundColor<<Config>> LightGreen
    ClassBackgroundColor<<Core>> LightBlue
    ClassBackgroundColor<<Utility>> LightGray
    ClassBackgroundColor<<Structure>> LightYellow
    PackageBackgroundColor White
    PackageBorderColor Gray
    ClassFontSize 12
    NoteFontSize 11
    PackageFontSize 13
}

title PGS Architecture Class Diagram

' Left: Configuration and Data Structures
package "Configuration" {
    class Config <<Config>> {
        + port: int
        + staticFolder: string
        + threadCount: int
        + rateLimit: RateLimitConfig
        + cache: CacheConfig
    }
    note right of Config
        Plain configuration structure
        Initialized from pgs_conf.json
    end note

    class RateLimitConfig <<Config>> {
        + maxRequests: int
        + timeWindow: int
    }

    class CacheConfig <<Config>> {
        + sizeMB: size_t
        + maxAgeSeconds: int
    }
}

package "Data Structures" {
    class ConnectionInfo <<Structure>> {
        + startTime: chrono::steady_clock::time_point
        + ip: string
        + isLogged: bool
        + isClosureLogged: bool
        + bytesReceived: uint64_t
        + bytesSent: uint64_t
        + logBuffer: vector<string>
        + ConnectionInfo(time, ipAddr, logged, closureLogged, received, sent)
    }
    note bottom of ConnectionInfo
        Tracks individual client connection metrics
        and maintains connection-specific log buffers
    end note
}

' Center: Core Components
package "Core Components" {
    class Server <<Core>> {
        - socket: Socket
        - router: Router
        - pool: ThreadPool
        - connectionsMutex: mutex
        - connections: map<int, ConnectionInfo>
        - shouldStop: atomic<bool>
        - epoll: EpollWrapper
        - rateLimiter: RateLimiter
        - cache: Cache
        + Server(int port, const string& staticFolder, int threadCount,
                int maxRequests, int timeWindow, int cacheSizeMB, int maxAgeSeconds)
        + start(): void
        + stop(): void
        - handleClient(int client_socket, const string& clientIp): void
        - closeConnection(int client_socket): void
        - logRequest(int client_socket, const string& message): void
    }
    note top of Server
        Central server component that orchestrates
        all other components and manages the
        lifecycle of client connections
    end note

    together {
        class Socket <<Core>> {
            - server_fd: int
            - port: int
            + Socket(int port)
            + bind(): void
            + listen(): void
            + getSocketFd() const: int
        }

        class Router <<Core>> {
            - staticFolder: string
            + Router(const string& staticFolder)
            + route(const string& path, int client_socket,
                   const string& clientIp, Middleware* middleware, Cache* cache): void
            - getMimeType(const string& path): string
            - readFileContent(const string& filePath): string
        }
    }

    together {
        class ThreadPool <<Core>> {
            - workers: vector<thread>
            - tasks: queue<function<void()>>
            - queueMutex: mutex
            - condition: condition_variable
            - stop_flag: atomic<bool>
            + ThreadPool(size_t numThreads)
            + enqueue(function<void()> task): void
        }

        class Logger <<Core>> {
            - {static} instance: Logger*
            - logFile: ofstream
            - logMutex: mutex
            + {static} getInstance(): Logger*
            + log(const string& message, const string& level, const string& ip): void
            + error(const string& message, const string& ip): void
            + info(const string& message, const string& ip): void
        }

        class Cache <<Core>> {
            - cache: unordered_map<string, CacheEntry>
            - mutex: shared_mutex
            - maxSize: size_t
            - currentSize: size_t
            + Cache(size_t maxSizeMB, chrono::seconds maxAge)
            + get(const string& key, vector<char>& data,
                 string& mimeType, time_t& lastModified): bool
            + set(const string& key, const vector<char>& data,
                 const string& mimeType, time_t lastModified): void
        }
    }
}

' Right: Utility Classes
package "Utility Classes" {
    together {
        abstract class Middleware <<Utility>> {
            + process(const string& data): string
        }

        class RateLimiter <<Utility>> {
            - maxRequests: size_t
            - timeWindow: chrono::seconds
            - clientRequests: unordered_map<string, deque<time_point>>
            + RateLimiter(size_t maxRequests, chrono::seconds timeWindow)
            + process(const string& data): string
        }

        class Compression <<Utility>> {
            + {static} shouldCompress(const string& mimeType, size_t contentLength): bool
            + {static} clientAcceptsGzip(const string& request): bool
            + process(const string& data): string
        }
    }

    together {
        class Http <<Utility>> {
            + {static} getRequestPath(const string& request): string
            + {static} sendResponse(int client_socket, const string& filePath,
                                  const string& mimeType, int statusCode,
                                  const string& clientIp, bool isIndex,
                                  Middleware* middleware, Cache* cache): void
        }

        class Parser <<Utility>> {
            + {static} parseConfig(const string& configFilePath): Config
        }
    }
}

' Core Dependencies
Server "1" *-- "1" Socket : manages >
Server "1" *-- "1" Router : uses >
Server "1" *-- "1" ThreadPool : delegates tasks to >
Server "1" o-- "0..*" ConnectionInfo : tracks >
Server "1" *-- "1" Cache : uses >
Server "1" *-- "1" RateLimiter : uses >

' Configuration Dependencies
Server ..> Config : configured by >
Config "1" *-- "1" RateLimitConfig
Config "1" *-- "1" CacheConfig

' Utility Dependencies
Server ..> Http : uses >
Parser ..> Config : creates >
Server ..> Logger : logs through >
Router ..> Logger : logs access >
Router ..> Http : uses >
Router ..> Middleware : uses >
Router ..> Cache : uses >

' Inheritance Relationships
RateLimiter --|> Middleware
Compression --|> Middleware

' Layout Hints
Config -[hidden]down-> ConnectionInfo
Socket -[hidden]right-> Router
Http -[hidden]right-> Parser

legend bottom
    |= Color |= Component Type |= Purpose |
    |<#LightGreen>| Configuration |Configuration structures|
    |<#LightBlue>| Core Components |Server functionality|
    |<#LightGray>| Utility Classes |Helper functions|
    |<#LightYellow>| Data Structures |Data management|
endlegend

@enduml