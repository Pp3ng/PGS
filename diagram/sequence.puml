@startuml "server-sequence"
scale 0.7
skinparam responseMessageBelowArrow true
skinparam maxMessageSize 150
skinparam ParticipantPadding 80
skinparam BoxPadding 40

box "Client Side" #LightYellow
participant "Client" as client
end box

box "Server Core Components" #LightBlue
participant "Main" as main
participant "Parser" as parser
participant "Server" as server
participant "Logger" as logger
participant "Socket" as socket
participant "Router" as router
participant "ThreadPool" as pool
participant "EpollWrapper" as epoll
participant "Http" as http
participant "Cache" as cache
participant "RateLimiter" as limiter
participant "Compression" as compression
participant "CacheCleanupThread" as cleanup
end box

== Server Initialization ==

[-> main: main()
activate main

main -> logger: getInstance()
activate logger
logger --> main: logger instance
deactivate logger

main -> parser: parseConfig("pgs_conf.json")
activate parser
parser -> logger: info("Reading configuration from: " + configFilePath)
parser -> parser: validateConfig()
parser -> logger: success("Configuration loaded successfully")
parser --> main: Config object
deactivate parser

main -> server: new Server(port, staticFolder, threadCount,\n maxRequests, timeWindow, cacheSizeMB, maxAgeSeconds)
activate server

server -> logger: step(1, "Initializing server components...")

server -> socket: new Socket(port)
activate socket
socket -> socket: socket(AF_INET6, SOCK_STREAM, 0)
socket -> logger: error() if failed
socket -> socket: setSocketOptions()
socket --> server
deactivate socket

server -> router: new Router(staticFolder)
activate router
router -> logger: success("Router initialized with static folder: " + staticFolder)
router --> server
deactivate router

server -> pool: new ThreadPool(threadCount)
activate pool
pool -> logger: success("thread pool initialized with " + threadCount + " threads")
pool --> server
deactivate pool

server -> limiter: new RateLimiter(maxRequests, std::chrono::seconds(timeWindow))
limiter --> server

server -> cache: new Cache(cacheSizeMB, std::chrono::seconds(maxAgeSeconds))
cache --> server

server -> server: startCacheCleanup()
server -> logger: info("Server initialized")
server --> main

== Main Event Loop ==

[-> server: start()
activate server

server -> server: startCacheCleanup()
activate server
create cleanup
server -> cleanup: start thread
note right: pthread_setname_np("cache-cleanup")\nnice(10)
deactivate server

server -> epoll: add(socket.getSocketFd(), EPOLLIN | EPOLLET)

loop until shouldStop
    server -> epoll: wait(events, MAX_EVENTS, 50ms)
    activate epoll
    epoll --> server: nfds
    deactivate epoll

    alt new connection (events[i].data.fd == socket_fd)
        server -> socket: acceptConnection(clientIp)
        activate socket
        socket -> socket: accept4(SOCK_NONBLOCK | SOCK_CLOEXEC)
        alt accept successful
            socket -> logger: success("New connection accepted from " + clientIp)
            socket --> server: client_socket
            server -> epoll: add(client_socket, EPOLLIN | EPOLLET)
        else accept failed
            socket -> logger: error("Failed to accept connection: " + error)
            socket --> server: -1
        end
        deactivate socket

    else existing connection
        alt event & EPOLLIN
            server -> pool: enqueue([this, client_socket, clientIp] { handleClient(client_socket, clientIp); })
        else event & (EPOLLHUP | EPOLLRDHUP | EPOLLERR)
            server -> server: closeConnection(client_socket)
        end
    end

    alt now - lastTimeoutCheck > TIMEOUT_CHECK_INTERVAL
        server -> server: checkTimeouts()
        note right: Close idle connections\nafter 20 seconds
    end
end

pool -> server: handleClient(client_socket, clientIp)
activate server

server -> http: getRequestPath(request)
activate http
http --> server: path
deactivate http

server -> router: route(path, client_socket, clientIp, &rateLimiter, &cache, request)
activate router

router -> http: isAssetRequest(path)
activate http
http --> router: isAsset
deactivate http

router -> router: getMimeType(path)
activate router
note right: Check file extension and\nreturn corresponding MIME type
deactivate router

alt file exists
    router -> http: sendResponse(client_socket, filePath, mimeType, 200, clientIp,\n!isAsset && isIndex, middleware, cache, request)
    activate http
    
    http -> http: checkClientCache(request, lastModified)
    alt client cache valid
        http -> client: "304 Not Modified"
        http -> logger: info("304 Not Modified sent")
    else need to send content
        http -> http: setupSocketOptions(client_socket, cork, clientIp)
        
        http -> cache: get(filePath, data, mimeType, lastModified)
        alt cache hit
            cache -> cache: updateLRU(key)
            note right
                1. Remove from current position
                2. Push to front of LRU list
                3. Update iterator
            end note
            cache --> http: cached content
        else cache miss
            http -> http: handleFileContent(fileGuard, filePath, fileSize, lastModified, clientIp)
            
            alt should compress
                http -> compression: shouldCompress(mimeType, fileSize)
                compression -> compression: process(content)
                activate compression
                compression -> compression: compressData(data)
                note right
                    Initialize zlib with:
                    1. Z_DEFAULT_COMPRESSION
                    2. Z_DEFLATED
                    3. 15 | 16 for gzip
                    4. 8 window bits
                    5. Z_DEFAULT_STRATEGY
                end note
                compression --> http: compressed data
                deactivate compression
            end
            
            http -> cache: set(std::move(key), std::move(data),\nstd::move(mimeType), lastModified)
        end
        
        http -> http: generateHeaders(statusCode, mimeType, fileSize, lastModified, isCompressed)
        
        alt fileSize < BUFFER_SIZE
            http -> http: sendWithWritev()
        else
            alt supports sendfile
                http -> http: sendWithSendfile()
            else supports mmap
                http -> http: sendWithMmap()
            else
                http -> http: sendWithRead()
            end
        end
        
        http -> logger: info("Response sent: " + std::to_string(bytesSent) + " bytes")
    end
    deactivate http
else file not found
    router -> http: sendResponse(client_socket, "404 Not Found", "text/plain", 404, clientIp)
end

deactivate router
deactivate server

== Server Shutdown ==

[-> main: SIGINT/SIGTERM
activate main

main -> server: stop()
activate server

server -> logger: warning("Initiating shutdown")
server -> server: shouldStop = true

server -> cleanup: notify cleanup thread
activate cleanup
cleanup -> cache: periodicCleanup()
cleanup --> server: cleanup thread terminated
deactivate cleanup

server -> pool: stop()
activate pool
pool -> pool: stop_flag = true
pool -> pool: condition.notify_all()

loop for each worker thread
    pool -> pool: worker.join()
end

pool -> pool: clear queues
pool --> server
deactivate pool

server -> socket: closeSocket()
activate socket
socket -> socket: close(server_fd)
socket -> logger: info("Server socket closed")
socket --> server
deactivate socket

loop for each client connection
    server -> server: closeConnection(client_socket)
    activate server
    server -> logger: info("Connection closed: " + clientIp)
    deactivate server
end

server -> logger: success("Server shutdown complete")
server --> main
deactivate server

main -> logger: destroyInstance()
activate logger

logger -> logger: running = false
logger -> logger: queueCV.notify_all()

alt logFile.is_open()
    logger -> logger: logFile.close()
end

logger -> logger: loggerThread.join()
logger --> main
deactivate logger

[<-- main: exit(0)
deactivate main

@enduml